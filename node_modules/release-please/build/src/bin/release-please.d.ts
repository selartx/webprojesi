#!/usr/bin/env node
import * as yargs from 'yargs';
import { ChangelogSection } from '../changelog-notes';
import { ReleaseType, VersioningStrategyType } from '../factory';
interface ErrorObject {
    body?: object;
    status?: number;
    message: string;
    stack: string;
}
interface GitHubArgs {
    dryRun?: boolean;
    trace?: boolean;
    repoUrl?: string;
    token?: string;
    apiUrl?: string;
    graphqlUrl?: string;
    fork?: boolean;
    defaultBranch?: string;
    targetBranch?: string;
}
interface ManifestArgs {
    configFile?: string;
    manifestFile?: string;
}
interface VersioningArgs {
    bumpMinorPreMajor?: boolean;
    bumpPatchForMinorPreMajor?: boolean;
    releaseAs?: string;
    lastPackageVersion?: string;
    latestTagVersion?: string;
    latestTagSha?: string;
    latestTagName?: string;
}
interface ManifestConfigArgs {
    path?: string;
    component?: string;
    packageName?: string;
    releaseType?: ReleaseType;
}
interface ReleaseArgs {
    draft?: boolean;
    prerelease?: boolean;
    releaseLabel?: string;
    snapshotLabel?: string;
    label?: string;
}
interface PullRequestArgs {
    draftPullRequest?: boolean;
    label?: string;
    skipLabeling?: boolean;
    signoff?: string;
}
interface PullRequestStrategyArgs {
    snapshot?: boolean;
    changelogSections?: ChangelogSection[];
    changelogPath?: string;
    changelogHost?: string;
    versioningStrategy?: VersioningStrategyType;
    versionFile?: string;
    extraFiles?: string[];
}
interface BootstrapArgs extends GitHubArgs, ManifestArgs, ManifestConfigArgs, VersioningArgs, PullRequestArgs, PullRequestStrategyArgs, ReleaseArgs {
    initialVersion?: string;
}
export declare const parser: yargs.Argv<yargs.Omit<BootstrapArgs & {
    debug: boolean;
}, "trace"> & {
    trace: boolean;
}>;
interface HandleError {
    (err: ErrorObject): void;
    logger?: Console;
    yargsArgs?: yargs.Arguments;
}
export declare const handleError: HandleError;
export {};
