import { WorkspacePlugin, AllPackages, DependencyGraph } from './workspace';
import { Version, VersionsMap } from '../version';
import { CandidateReleasePullRequest } from '../manifest';
interface Gav {
    groupId: string;
    artifactId: string;
    version: string;
}
interface MavenArtifact extends Gav {
    path: string;
    name: string;
    dependencies: Gav[];
    testDependencies: Gav[];
    pomContent: string;
}
export declare class MavenWorkspace extends WorkspacePlugin<MavenArtifact> {
    private fetchPom;
    protected buildAllPackages(candidates: CandidateReleasePullRequest[]): Promise<AllPackages<MavenArtifact>>;
    protected buildGraph(allPackages: MavenArtifact[]): Promise<DependencyGraph<MavenArtifact>>;
    protected bumpVersion(artifact: MavenArtifact): Version;
    protected updateCandidate(existingCandidate: CandidateReleasePullRequest, artifact: MavenArtifact, updatedVersions: VersionsMap): CandidateReleasePullRequest;
    protected newCandidate(artifact: MavenArtifact, updatedVersions: VersionsMap): CandidateReleasePullRequest;
    protected inScope(candidate: CandidateReleasePullRequest): boolean;
    protected packageNameFromPackage(artifact: MavenArtifact): string;
    protected pathFromPackage(artifact: MavenArtifact): string;
    protected postProcessCandidates(candidates: CandidateReleasePullRequest[], _updatedVersions: VersionsMap): CandidateReleasePullRequest[];
}
export {};
